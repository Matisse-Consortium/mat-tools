#
# Parameter file of the image reconstruction script "mat_cal_imarec_all.2.csh"
# ============================================================================"
#
# start of the script:  $SCRIPTS/mat_cal_imarec_all.2.csh  parfile (a template of parfile is $SCRIPTS/mat_cal_imarec_all.2.par)
#
# ------------------------------------------------------------------------------------
# ----------- START of INPUT ------------------------------------------------------------
# ------------------------------------------------------------------------------------
#
# INPUT data
set objname       = TargetName # name of the target (note: underscore _ in the string is not allowed, i.e. use RCar and NOT R_Car)
set data          = (data/{*fits})  # liste of all interferometric data used for image reconstruction (with oifits format)
set lambdaList    = (1.7 1.75) # (4.0 4.8) # (2.162 2.1625) # (0.1 20) # defining the wavelength intervalls used for the reconstruction of one 2D image:
                                # a list of lambda ranges (pairs of lower and upper wavelengths, i.e. a  monotonicially increasing set of numbers);
                                # it is a sequence of space separated floating point numbers.
# SWITCH: guess = 1: image reconstruction parameter; guess = 0: image reconstruction run
# --------------------------------------------------------------------------------------
set guess         = 0             # Flag (integer !=0) --> estimation of image reconstruction parameter, e.g. FOV, model fit; the results are stored in directory Parameter.Estimation/
                                  #  --> UV coverage in postscript file Parameter.Estimation/uv.ps; wavelength channels used plotted in Parameter.Estimation/wavelengths.ps
                                  #  --> info about the interferometric data and image reconstruction parameters are given in the ASCII file Parameter.Estimation/data.parameter
				  # Flag (integer ==0) --> image reconstruction run
set fitfwhm2      = 2.0          # 2.35 # 40.0 # 0.1           # Start FWHM for the model fit (in mas)
#
#
# ------------------------------------------------------------------------------------
# INPUT - parameter
# ================= BEGIN OF INPUT for the image reconstruction run (guess = 0) ==================================================================================
set algoMode      = 1           # Specifies if bispectrum or complex visibilities are used for reconstruction. 1 = use bispectrum, 2 = use complex visibilities,
                                # 3 = use bispectrum and complex visibilities. [1]
set engine        = 2           # Specifies the optimization engine used; 1: ASA-CG, 2: L-BFGS-B. [1]
set costFunc      = 1           # Specifies the chi square function Q[ok(x)] of the measured data which should be minimized (ok(x) is the actual iterated image):
				# 1: Q[ok(x)] = Sum{ |ibis(u,v) - mbis(u,v)|^2/var(u,v) }, with ibis(u,v) & mbis(u,v) the iterated and measured bispectrum, repectively, and
				#    var(u,v) the variance of mbis(u,v)
				# 2: Q[ok(x)] = Sum{ |exp(i iph(u,v)) - exp(i mph(u,v))|^2/varph(u,v) + costWeight*|imod(u,v) - mmod(u,v)|^2/varmod(u,v) }, with
				#    exp(i iph(u,v)) & exp(i mph(u,v)) the phasors of the iterated and measured bispectrum, repectively, and varph(u,v) the variance of exp(i mph(u,v)),
				#    and with imod(u,v) & mmod(u,v) the moduli of the iterated and measured bispectrum, repectively, and varmod(u,v) the variance of mmod(u,v),
				#    and costWeight is a weight for the modulus part of Q[ok(x)], [1.0]
				# 3: Q[ok(x)] = Sum{ |exp(i iph(u,v)) - exp(i mph(u,v))|^2/varph(u,v) } + costWeight*Sum{ |ipow(u) - mpow(u)|^2/varpow(u) }, with
				#    ipow(u) & mpow(u) the iterated and measured power spectrum, repectively, and varpow(u) the variance of mpow(u), and
				#    with costWeight is a weight for the power spectrum part of Q[ok(x)], [1.0]
set fov           = 84         # Field of view for the reconstructed image in [mas].
set npix          = 128         # Size of the reconstructed image in pixels. Powers of 2 should be used (speeds up the FFT), but this is not mandatory.
set oradiusStart  = 36.0        # start radius of the object mask [mas]
set stepSize      = 1.0         # step size for the object mask radius scan [mas]; next radius = actual radius + stepsize
set oradiusNumber = 6           # number of object mask radius scans
                                # oradius(n) = oradiusStart + (n-1)*stepSize  (n = 1..oradiusNumber)
				# IRBis runs with the object mask radius list $oradiusStart, $stepSize, $oradiusNumber
# start values of the hyperparameter mu loop:
# - different start values of the hyperparameter mu will be tested until the first minimum of qrec is reached
#   (qrec is a measure of the quality of the reconstrcution derived from Chi^2 and residual ratio values)
# - the tested start hyperparameters are $muStart (next) = $muStart (actual) * $muFactor, starting with the first start hyperparameter $muStart0
# - the last tested start hyperparameter is the one with qrec > qrec_min
# - two different qrec modes can be applied:
#      * qrecmode = 1 : qrec is formed by the chi^2/residual ratios of the measured phases (CP or Fourier phase) and squared visibilities,
#      * qrecmode = 2 : qrec is formed by the chi^2/residual ratios of the measured phases (CP or Fourier phase) only
# - IRBis runs with the hyperparameter list $muStart, $muFactor, $muNumber.
set qrecmode      = 2
set muStart0      = 1.0 # 10.0 # 1.0   # Test of different muStart values $muStart(next) = $muStart(actual) * $muFactor0 beginning with $muStart0 in the loop below
set muFactor0     = 0.5 # 0.1    # for the test of different muStart values in the loop below
set muFactor      = 0.5 # 0.1    # next mu value is actual mu multiplied with mufactor (for IRBis call only)
set muNumber      = 12 # 6       # number of regularization parameter runs (for IRBis call only)
                                 # mu(n) = muStart*muFactor^(n-1)  (n = 1..muNumber)
				 # IRBis runs with the regularization parameter list $muStart, $muFactor, $muNumber (with $muStart as calculated above)

set regFuncs      = (-3 -4) # (0 -3 -4 -6) # (-2 -3 -4 -6) # (-1 -2 -3 -4 -5 -6) # (4 -4 3 -3 2 5 -5 6) # (-4)         # regularisation function(s) (0 = no regularization)
                                 # = 1: pixel intensity quadratic:  H(x,y) := Sum{|ok(x,y)|^2/prior(x,y)}
                                 # = 2: maximum entropy:            H(x,y) := Sum{ok(x,y)*alog(ok(x,y)/prior(x,y)) - ok(x,y) + prior(x,y)}
                                 # = 3: pixel difference quadratic: H(x,y) := Sum{[|ok(x,y)-ok(x+dx,y)|^2 + |ok(x,y)-ok(x,y+dy)|^2] / prior(x,y)}
                                 # = 4: edge preserving:            H(x,y) := Sum{[sqrt[|ok(x+dx,y)-ok(x,y)|^2 + |ok(x,y+dy)-ok(x,y)|^2 + eps^2]-eps] / prior(x,y)}
                                 # = 5: smoothness:                 H(x,y) := Sum{|ok(x,y)-ok(x+dx,y+dy)|^2}/prior(x,y)
                                 # = 6: quadratic Tikhonov:         H(x,y) := Sum{[|ok(x,y,z)-prior(x,y,z)|^2}
                                 # If a negative number (for example -4) is used, the prior image is set to a constant image (no estimate of the target).
set regEps        = 0.01 # 0.001          # Epsilon for regularisation function 4 (edge preserving) only
set weightPower   = 0.5 # 0.0          # power for the uv density weight

set startmode     = 4         # 0 = read from file, 1 = point source, 2 = gaussian disc, 3 = uniform disc, 4 = fully darkened disc, 5 = modified Lorentz function
set startparam    = 11.539     # startmode=0 -> scale [mas/px], mode=2 -> FWHM [mas], mode=3 -> diameter [mas], mode=4 -> diameter [mas], mode=5 -> FWHM [mas].

set priormode     = $startmode   # 0 = read from file, 1 = point source, 2 = gaussian disc, 3 = uniform disc, 4 = fully darkened disc.
set priorparam    = $startparam  # mode=0 -> scale [mas/px], mode=2 -> FWHM [mas], mode=3 -> diameter [mas], mode=4 -> diameter [mas].
#
#  !!the above settings for startmode and startparam are only valid if no start image and/or no prior image is read in!!
#  !!startmode and priormode define the default start and prior image, respectively!!
#
# INPUT - images
set model              = no # Gap-0213.10.5mu.px1.5mas.20deg.cut128.fits # no    # unconvolved model image (only for simulated interferometric data; i.e. input target of ASPRO2) or no
set modelPixelScale    = 1.5     # pixel size of the model image [mas]
set startima           = no      # start image unconvolved or no
set startimaPixelScale = 2.0     # pixel size of the start image [mas]
set priorima           = no      # prior image unconvolved or no
set priorimaPixelScale = 2.0     # pixel size of the prior image [mas]
#
# ============= following parameters are changed very rarely =====================================
#                          for image reconstruction from bispectrum only (algoMode = 1):
set calcT3amp   = 1      # =1: T3 amplitude and error is calculated from the visibilities^2; =0: is not calculated
set calcVis2f0  = 1      # =1: an artificial squared visibility and error for spatial frequency 0 should be calculated; =0: is not calculated
#			   for image reconstruction from complex visibilities (algoMode = 2 or 3):
set calcVisamp  = 1      # =1: VIS amplitude and error is calculated from the visibilities^2; =0: is not calculated
set calcVisf0   = 1      # =1: an artificial complex visibility and error for spatial frequency 0 should be set; =0: is not set
		         #
set costWeight  = 1.0    # Weight for the cost function 2 (weight between bispectrum/FTspectrum phasor term and modulus term) and 3 (weight between bispectrum/FTspectrum phasor term and pow term)
set wienerfilter = 0     # =1: Wiener filter is applied to the gradient of the cost function; =0: is not applied
set gradTol     = 0.00000000001 # Tolerance value for ASA_CG [1e-11]
set factr       = 10.0          # L-BFGS-B tolerance for termination test. [10.0]
set pgTol       = 0.000001      # L-BFGS-B projected gradient tolerance for termination test. [1e-06]
set ncorr       = 5             # Number of  corrections for L-BFGS-B. [5]
set startselect = 4       #  startimage is 4: the reconstruction of the run before; 0: the default image 3: the best reconstruction up to now [4]
set priorselect = 4       #  priorimage is 4: the reconstruction of the run before; 0: the default image 3: the best reconstruction up to now [4]
set convScale   = -1.0    # the reconstruction is convolved with the ideal PSF of a single-dish telescope with a diamater which is identical
                          # to the length of the longest baseline of the data (--> reconstruction with interferometric resolution);
                          # optionally this PSF is scaled using convScale: convScale=1.0 means interferometric resolution;
                          # convScale>1.0 means super resolution: positive values correspond to an ideal telescope PSF; negative values correspond to a Gaussian PSF
set fitfwhm       = $fitfwhm2 # 2.35   # 0.1    # Start FWHM for the model fit (in mas) [2.35482004503095 mas]
set precision     = 0      # Number of digits after decimal point for gradient and cost value (precision < 0 : round relative, precision == 0 : no round, precision > 0 : round absolute). [0]
set bltol         = 0.05   # Maximum allowed baseline difference (in meter?) for finding a VIS2 element for a T3 element. [0.05]
set mjdtol        = 0.0001 # Maximum allowed MJD difference (in days?) for finding a VIS2 element for a T3 element. [0.0001]
set filterfwhm    = 0.0    # convolution of the gradient with a Gaussian of FWHM filterfwhm [0.0]
set filterfactor  = 0.99   # reducing the size of the convolution cernel after each iteration step by the factor filterfactor [0.99]
set noisefactor   = 0.0    # Noise factor (noise_sigma = error*factor) for the noise random generator. [0.0]
set info          = "param,result" # "param,result,prepare" # "istd,param,result,prepare" # can be used to control the output of the plugin.
# ================= END OF INPUT for the image reconstruction run (guess = 0) ====================================================================================

# ================= BEGIN OF INPUT (guess = 1) ==================================================================================
set calcT3amp2    = 1             # =1: T3 amplitude and error is calculated from the visibilities^2; =0: is not calculated (for guess = 1 only)
set mjdtol2       = 0.0001        # Maximum allowed MJD difference (in days?) for finding a VIS2 element for a T3 element. [0.0001]
set bltol2        = 0.05          # Maximum allowed baseline difference (in meter?) for finding a VIS2 element for a T3 element. [0.05]
# set fitfwhm2      = 20.0 # 2.35 # 40.0 # 0.1           # Start FWHM for the model fit (in mas) [2.35482004503095 mas]
# ================= END of INPUT (guess = 1) ====================================================================================
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# ----------- END of INPUT ------------------------------------------------------------
# ------------------------------------------------------------------------------------
