#!/bin/tcsh
#
#
# ------------------------------------------------------------------------------------
# ----------- START of INPUT ------------------------------------------------------------
# ------------------------------------------------------------------------------------
setenv SCRIPTS /aux/weall/khh/matissebr/scripts0/scripts00    # Path to the directory containing all scripts used
# setenv SCRIPTS $INTROOT/scripts                     # Path to the directory containing all scripts used
#
# INPUT data
set objname = TargetName # name of the target (note: underscore _ in the string is not allowed, i.e. use RCar and NOT R_Car)
set pfad    = $cwd/                        # absolute path to the interferometric data
set data0   = (data1.oifits data2.oifits data3.oifits)  # liste of all interferometric data used for image reconstruction (with oifits format)
set lambdaList    = (0.1 20000) # (2.162 2.1625) # (0.1 20) # defining the wavelength intervalls used for the reconstruction of one 2D image:
                                # a list of lambda ranges (pairs of lower and upper wavelengths, i.e. a  monotonicially increasing set of numbers);
                                # it is a sequence of space separated floating point numbers.
# SWITCH: guess = 1: image reconstruction parameter; guess = 0: image reconstruction run
set guess         = 0             # Flag (integer !=0) --> estimation of image reconstruction parameter, e.g. FOV, model fit; the results are stored in directory Parameter.Estimation/
                                  #  --> UV coverage in postscript file Parameter.Estimation/uv.ps; wavelength channels used plotted in Parameter.Estimation/wavelengths.ps
                                  #  --> info about the interferometric data and image reconstruction parameters are given in the ASCII file Parameter.Estimation/data.parameter
				  # Flag (integer ==0) --> image reconstruction run
# ================= BEGIN OF INPUT (guess != 0) ==================================================================================
set calcT3amp2    = 1             # =1: T3 amplitude and error is calculated from the visibilities^2; =0: is not calculated (for guess = 1 only)
set mjdtol2       = 0.0001        # Maximum allowed MJD difference (in days?) for finding a VIS2 element for a T3 element. [0.0001]
set bltol2        = 0.05          # Maximum allowed baseline difference (in meter?) for finding a VIS2 element for a T3 element. [0.05]
set fitfwhm2      = 2.35 # 40.0 # 0.1           # Start FWHM for the model fit (in mas) [2.35482004503095 mas]
# ================= END of INPUT (guess != 0) ====================================================================================
#
#
# ------------------------------------------------------------------------------------
# INPUT - parameter
# ================= BEGIN OF INPUT for the image reconstruction run (guess === 0) ==================================================================================
set engine        = 1           # Specifies the optimization engine used; 1: ASA-CG, 2: L-BFGS-B. [1]
set algoMode      = 1           # Specifies if bispectrum or complex visibilities are used for reconstruction. 1 = use bispectrum, 2 = use complex visibilities,
                                # 3 = use bispectrum and complex visibilities. [1]
set fov           = 200         # Field of view for the reconstructed image in [mas].
set npix          = 256         # Size of the reconstructed image in pixels. Powers of 2 should be used (speeds up the FFT), but this is not mandatory.
set oradiusStart  = 60.0         # start radius of the object mask [mas]
set stepSize      = 2.0          # step size for the object mask radius scan [mas]; next radius = actual radius + stepsize
set oradiusNumber = 6            # number of object mask radius scans
                                 # oradius(n) = oradiusStart + (n-1)*stepSize  (n = 1..oradiusNumber)
# start values of the hyperparameter mu:
# - different start values of the hyperparameter mu will be tested until the first minimum of qrec is reached
#   (qrec is a measure of the quality of the reconstrcution derived from Chi^2 and residual ratio values)
# - the tested start hyperparameters are $muStart (next) = $muStart (actual) * $muFactor, starting with the first start hyperparameter $muStart0
# - the last tested start hyperparameter is the one with qrec > qrec_min
# - two different qrec modes can be applied:
#      * qrecmode = 1 : qrec is formed by the chi^2/residual ratios of the measured phases (CP or Fourier phase) and squared visibilities,
#      * qrecmode = 2 : qrec is formed by the chi^2/residual ratios of the measured phases (CP or Fourier phase) only
set qrecmode      = 2
set muStart0      = 10.0 # 1.0 # 0.1       # Test of $muNumber different muStart values = $muStart0 * $muFactor in the loop below
set muFactor      = 0.5 # 0.1    # next mu value is actual mu multiplied with mufactor
set muNumber      = 12 # 6       # number of regularization parameter runs 
                                 # mu(n) = muStart*muFactor^(n-1)  (n = 1..muNumber)

set regFuncs      = (-3) # (-1 -2 -3 -4 -5 -6) # (-1 -4 -3 -5) # (4 -4 3 -3 2 5 -5 6) # (-4)         # regularisation function(s) (0 = no regularization)
                                 # = 1: pixel intensity quadratic:  H(x,y) := Sum{|ok(x,y)|^2/prior(x,y)}
                                 # = 2: maximum entropy:            H(x,y) := Sum{ok(x,y)*alog(ok(x,y)/prior(x,y)) - ok(x,y) + prior(x,y)}
                                 # = 3: pixel difference quadratic: H(x,y) := Sum{[|ok(x,y)-ok(x+dx,y)|^2 + |ok(x,y)-ok(x,y+dy)|^2] / prior(x,y)}
                                 # = 4: edge preserving:            H(x,y) := Sum{[sqrt[|ok(x+dx,y)-ok(x,y)|^2 + |ok(x,y+dy)-ok(x,y)|^2 + eps^2]-eps] / prior(x,y)}
                                 # = 5: smoothness:                 H(x,y) := Sum{|ok(x,y)-ok(x+dx,y+dy)|^2}/prior(x,y)
                                 # = 6: quadratic Tikhonov:         H(x,y) := Sum{[|ok(x,y,z)-prior(x,y,z)|^2}
                                 # If a negative number (for example -4) is used, the prior image is set to a constant image (no estimate of the target).
set regEps        = 1.0          # Epsilon for regularisation function 4 (edge preserving) only
set weightPower   = 0.0 # 0.5 # 0.0          # power for the uv density weight

set startmode     = 3            # 0 = read from file, 1 = point source, 2 = gaussian disc, 3 = uniform disc, 4 = fully darkened disc, 5 = modified Lorentz function
set startparam    = 49.667       # startmode=0 -> scale [mas/px], mode=2 -> FWHM [mas], mode=3 -> diameter [mas], mode=4 -> diameter [mas], mode=5 -> FWHM [mas].

set priormode     = $startmode   # 0 = read from file, 1 = point source, 2 = gaussian disc, 3 = uniform disc, 4 = fully darkened disc.
set priorparam    = $startparam  # mode=0 -> scale [mas/px], mode=2 -> FWHM [mas], mode=3 -> diameter [mas], mode=4 -> diameter [mas].
#
#  !!the above settings for startmode and startparam are only valid if no start image and/or no prior image is read in!!
#  !!startmode and priormode define the default start and prior image, respectively!!
#
# INPUT - images
set model              = no # $pfad/*.fits      # model image unconvolved (only for simulated data) or no
set modelPixelScale    = 0.68    # pixel size of the model image [mas]
set startima           = no      # start image unconvolved or no
set startimaPixelScale = 2.0     # pixel size of the start image [mas]
set priorima           = no      # prior image unconvolved or no
set priorimaPixelScale = 2.0     # pixel size of the prior image [mas]
#
# ============= following parameters are changed very rarely =====================================
#                          for image reconstruction from bispectrum only (algoMode = 1):
set calcT3amp   = 1      # =1: T3 amplitude and error is calculated from the visibilities^2; =0: is not calculated
set calcVis2f0  = 1      # =1: an artificial squared visibility and error for spatial frequency 0 should be calculated; =0: is not calculated
#			   for image reconstruction from complex visibilities (algoMode = 2 or 3):
set calcVisamp  = 1      # =1: VIS amplitude and error is calculated from the visibilities^2; =0: is not calculated
set calcVisf0   = 1      # =1: an artificial complex visibility and error for spatial frequency 0 should be set; =0: is not set
		         #
set costFunc    = 1      # 1: chi square of the bispectrum: Q[ok(x,y)] = Sum{ weight(u,v)/var(u,v)*|gamma0*ibis(u,v) - mbis(u,v)|^2 }
                         # 2: chi square of the bispectrum phasors: Q[ok(x,y)] = Sum{ weight(u,v)/varph(u,v)*|gamma0*exp(i iph(u,v)) - exp(i mph(u,v)|^2
                         #                                                            + weight(u,v)/varmod(u,v)*f0*|gamma0*imod(u,v) - mmod(u,v)|^2
set wienerfilter = 1     # =1: Wiener filter is applied to the gradient of the cost function; =0: is not applied
set costWeight  = 1.0    # Weight for the cost function 2 (weight between bispectrum phasor term and modulus term)
set gradTol     = 0.00000000001 # Tolerance value for ASA_CG.
set startselect = 4        #  startimage is 4: the reconstruction of the run before; 0: the default image 3: the best reconstruction up to now [4]
set priorselect = 4        #  priorimage is 4: the reconstruction of the run before; 0: the default image 3: the best reconstruction up to now [4]
set convScale   = 1.0    # the reconstruction is convolved with the ideal PSF of a single-dish telescope with a diamater which is identical
                           # to the length of the longest baseline of the data (--> reconstruction with interferometric resolution);
                           # optionally this PSF is scaled using convScale: convScale=1.0 means interferometric resolution;
                           # convScale>1.0 means super resolution
set fitfwhm       = 2.35 # 0.1    # Start FWHM for the model fit (in mas) [2.35482004503095 mas]
set precision     = 0      # Number of digits after decimal point for gradient and cost value (precision < 0 : round relative, precision == 0 : no round, precision > 0 : round absolute). [0]
set bltol         = 0.05   # Maximum allowed baseline difference (in meter?) for finding a VIS2 element for a T3 element. [0.05]
set mjdtol        = 0.0001 # Maximum allowed MJD difference (in days?) for finding a VIS2 element for a T3 element. [0.0001]
set filterfwhm    = 0.0    # convolution of the gradient with a Gaussian of FWHM filterfwhm [0.0]
set filterfactor  = 0.99   # reducing the size of the convolution cernel after each iteration step by the factor filterfactor [0.99]
set noisefactor   = 0.0    # Noise factor (noise_sigma = error*factor) for the noise random generator. [0.0]
set info          = "param,result" # "param,result,prepare" # "istd,param,result,prepare" # can be used to control the output of the plugin.
# ================= END OF INPUT for the image reconstruction run (guess === 0) ====================================================================================
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# ----------- END of INPUT ------------------------------------------------------------
# ------------------------------------------------------------------------------------


set data = ()
foreach f ($data0)
   set data = ($data $pfad/$f)
end
ls -l $data

unset lambdaList0
set lambdaList0 = ()
set lambdaintervalls = `echo $#lambdaList | awk '{print int($1/2);}'`
set lambdas = `echo $lambdaintervalls | awk '{print 2*$1;}'`
if( $#lambdaList != $lambdas ) then
  echo "Anzahl der Intervallgrenzen ist ungerade: $#lambdaList"
  goto Label999
endif
set lambdaFrom = $lambdaList[1]
set lambdaTo   = $lambdaList[$#lambdaList]
set i = 1
while( $i <= $lambdaintervalls )
  set j = `echo $i | awk '{print 2*$1-1;}'`
  set jj = `echo $j | awk '{print $1+1;}'`
  if($i <  $lambdaintervalls) set lambdaList0 = ($lambdaList0$lambdaList[$j],$lambdaList[$jj],)
  if($i == $lambdaintervalls) set lambdaList0 = ($lambdaList0$lambdaList[$j],$lambdaList[$jj])
@ i++
end
echo $lambdaList0

# ----------- estimation of image reconstruction parameter --------------------------------------- A -------------------------
if($guess != 0 ) then
  set jplot = 0
  setenv JPLOT $jplot
  setenv CALCT3AMP $calcT3amp2
  setenv MJDTOL $mjdtol2
  setenv BLTOL  $bltol2
  setenv FITFWHM $fitfwhm2
  $SCRIPTS/parameter.est.csh $lambdaintervalls $lambdaList $data
  cp $0 Parameter.Estimation/
  goto Label999
endif
# ----------- estimation of image reconstruction parameter --------------------------------------- E -------------------------

echo "------------1-------------"
if($algoMode == 1) then
  set resultdir = BIS.$objname.F$fov.pix$npix.Cost$costFunc.weightPower$weightPower.precision$precision.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine.E.1
  set name = BIS.$objname.F$fov.pix$npix.weightPower$weightPower.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine
endif
if($algoMode == 2) then
  set resultdir = FT.$objname.F$fov.pix$npix.Cost$costFunc.weightPower$weightPower.precision$precision.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine.E.1
  set name = FT.$objname.F$fov.pix$npix.weightPower$weightPower.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine
endif
if($algoMode == 3) then
  set resultdir = FTBIS.$objname.F$fov.pix$npix.Cost$costFunc.weightPower$weightPower.precision$precision.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine.E.1
  set name = FTBIS.$objname.F$fov.pix$npix.weightPower$weightPower.qrec$qrecmode.mu$muStart0.reg$regFuncs[1].wiener$wienerfilter.engine$engine
endif
set i = 1
label1:
if(-d $resultdir) then
  echo "$resultdir existiert bereits."
  @ i++
  set resultdir = $resultdir:r.$i
  goto label1
endif
echo "$resultdir existiert noch nicht."
mkdir -p $resultdir
echo $resultdir

echo "------------2-------------"

set starttime = `date`
Label111:

foreach regFunc ( $regFuncs )
# ------------ loop over chosen regularization functions ------------------------------- A --------------
set qrecvorher = 1e36
set muStart = $muStart0
while( 1 > 0 )
# foreach muStart ( $muStarts )
# ------------ loop over chosen start values of mu ----------------------------------- A ------------


ls -l $data $model
set anzahl = $#data
rm -f sof
set i = 1
while($i <= $anzahl)
  echo "$data[$i] TARGET_CAL_INT" >> sof
@ i++
end 
if( $model != "no" ) then
  echo "$model MODEL_IMAGE" >> sof
endif
if( $startima != "no" ) then
  echo "$startima START_IMAGE" >> sof
  set startmode = 0
  set startparam = $startimaPixelScale 
endif
if( $priorima != "no" ) then
  echo "$priorima PRIOR_IMAGE" >> sof
  set priormode = 0
  set priorparam = $priorimaPixelScale
endif

echo "---1---"

#  --nbresult            : Number of reconstructions written to the result file.
#                          The best result is always stored. If 0 is given, all
#                          created reconstructions are stored in the result
#                          file. [0]
#  --vis2_name           : ASCII file for measured and reconstructed squared
#                          visibilities. []
#  --cp_name             : ASCII file for measured and reconstructed closure
#                          phases. []
#  --vis_name            : ASCII file for measured and reconstructed complex visibilities. []
# ------------------------------------------------------------------------------------
if( $engine > 1 ) then
  set DARGS = (--nbresult=3 --lambda_list=$lambdaList0 \
	       --algo_mode=$algoMode \
	       --calc_visamp=$calcVisamp --calc_visf0=$calcVisf0 \
	       --calc_t3amp=$calcT3amp --calc_vis2f0=$calcVis2f0 --model_scale=$modelPixelScale \
	       --om_start=$oradiusStart --om_step=$stepSize --om_count=$oradiusNumber --engine=$engine \
	       --mu_start=$muStart --mu_factor=$muFactor --mu_count=$muNumber --wiener_filter=$wienerfilter --fit_fwhm=$fitfwhm \
	       --cost_func=$costFunc --cost_weight=$costWeight --reg_func=$regFunc --reg_eps=$regEps --start_select=$startselect --prior_select=$priorselect \
	       --grad_tol=$gradTol --weight_power=$weightPower --conv_scale=$convScale --precision=$precision --info_flags=$info \
	       --mjd_tol=$mjdtol --bl_tol=$bltol --filter_fwhm=$filterfwhm --filter_factor=$filterfactor --guess=$guess --noise_factor=$noisefactor)
else
  set DARGS = (--nbresult=3 --lambda_list=$lambdaList0 \
               --algo_mode=$algoMode \
               --calc_visamp=$calcVisamp --calc_visf0=$calcVisf0 \
               --calc_t3amp=$calcT3amp --calc_vis2f0=$calcVis2f0 --model_scale=$modelPixelScale \
               --om_start=$oradiusStart --om_step=$stepSize --om_count=$oradiusNumber \
               --mu_start=$muStart --mu_factor=$muFactor --mu_count=$muNumber --wiener_filter=$wienerfilter --fit_fwhm=$fitfwhm \
               --cost_func=$costFunc --cost_weight=$costWeight --reg_func=$regFunc --reg_eps=$regEps --start_select=$startselect --prior_select=$priorselect \
               --grad_tol=$gradTol --weight_power=$weightPower --conv_scale=$convScale --precision=$precision --info_flags=$info \
               --mjd_tol=$mjdtol --bl_tol=$bltol --filter_fwhm=$filterfwhm --filter_factor=$filterfactor --guess=$guess --noise_factor=$noisefactor)
endif
# ------------------------------------------------------------------------------------
echo $DARGS

echo "---2---"
# ------------------------------------------------------------------------------------
set NSTART = (--start_mode=$startmode --start_param=$startparam)
set NPRIOR = (--prior_mode=$priormode --prior_param=$priorparam)
set NFOV   = (--fov=$fov)
set NDIM   = (--npix=$npix)
set results = E.1
set i = 1
label2:
if(-d $results) then
  echo "$results existiert bereits."
  @ i++
  set results = $results:r.$i
  goto label2
endif
echo "$results existiert noch nicht."
mkdir -p $results
echo $results

if($algoMode == 1) set OUTPUT = (--vis2_name=${results}/A.vis2.dat --cp_name=${results}/A.cp.dat)
if($algoMode == 2) set OUTPUT = (--vis_name=${results}/A.ft.dat)
if($algoMode == 3) set OUTPUT = (--vis2_name=${results}/A.vis2.dat --cp_name=${results}/A.cp.dat --vis_name=${results}/A.ft.dat)
# ------------------------------------------------------------------------------------

echo "---3---"

set ARGS = ($NSTART $NPRIOR $NFOV $NDIM $OUTPUT)
echo $ARGS

echo "---4---"

esorex --log-dir=${results} --output-dir=${results} mat_cal_imarec $DARGS $ARGS sof

cp $0 ${results}/

cd ${results}/
  if($algoMode == 1) then
    set tgauss = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit gaussian /) {print $12;}}' esorex.log`
    set tchi2gauss = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit gaussian /) {print $19;}}' esorex.log`
    set tud    = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit uniform /) {print $12;}}' esorex.log`
    set tchi2ud    = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit uniform /) {print $19;}}' esorex.log`
    set tfdd   = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit fully darkened /) {print $13;}}' esorex.log`
    set tchi2fdd   = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit fully darkened /) {print $20;}}' esorex.log`
    set tld    = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit Lorentz disk /) {print $12;}}' esorex.log`
    set tchi2ld    = `awk '{if ($0 ~ /mat_fit_start_image_vis2: fit Lorentz disk /) {print $19;}}' esorex.log`
  endif
  if($algoMode != 1) then
    set tgauss = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit gaussian /) {print $12;}}' esorex.log`
    set tchi2gauss = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit gaussian /) {print $19;}}' esorex.log`
    set tud    = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit uniform /) {print $12;}}' esorex.log`
    set tchi2ud    = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit uniform /) {print $19;}}' esorex.log`
    set tfdd   = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit fully darkened /) {print $13;}}' esorex.log`
    set tchi2fdd   = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit fully darkened /) {print $20;}}' esorex.log`
    set tld    = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit Lorentz disk /) {print $12;}}' esorex.log`
    set tchi2ld    = `awk '{if ($0 ~ /mat_fit_start_image_vis: fit Lorentz disk /) {print $19;}}' esorex.log`
  endif
  set tfov   = `awk '{if ($0 ~ /mat_guess_parameters: fov   = /) {print $0;}}' esorex.log`
  set tnpix  = `awk '{if ($0 ~ /mat_guess_parameters: npix  = /) {print $0;}}' esorex.log | tr '*' x`
  set ttfov  = `awk '{if ($0 ~ /mat_guess_parameters: --fov=/) {print $0;}}' esorex.log`
  set ttnpix = `awk '{if ($0 ~ /mat_guess_parameters: --npix=/) {print $0;}}' esorex.log`
  set ttpx   = `awk '{if ($0 ~ /mat_guess_parameters: -> psize = /) {print $0;}}' esorex.log`
  echo "------------------------------------------------------------------------------------------------------"
  echo "tgauss = $tgauss"; echo "tud = $tud"; echo "tfdd = $tfdd"; echo "tld = $tld"; echo "tfov = $tfov"; echo "tnpix = $tnpix"; echo "ttfov = $ttfov"; echo "ttnpix = $ttnpix"; echo "ttpx = $ttpx"
  if( X$tgauss == "X" ) set tgauss = -1.0
  if( X$tud == "X" ) set tud = -1.0
  if( X$tfdd == "X" ) set tfdd = -1.0
  if( X$tld == "X" ) set tld = -1.0
  echo "------------------------------------------------------------------------------------------------------"
  set fits = `echo rec_*.fits`; ls -l $fits
  if($algoMode == 1) then  
    echo $fov $fits $convScale $costFunc $regFunc $oradiusStart $stepSize $oradiusNumber $muStart $muFactor $muNumber $npix $startmode $startparam $objname $model $tgauss $tud $tfdd $weightPower $calcVis2f0 $tld
    $SCRIPTS/IRBis.display.Mac.nt.csh \
    $fov $fits $convScale $costFunc $regFunc $oradiusStart $stepSize $oradiusNumber $muStart $muFactor $muNumber $npix $startmode $startparam $objname $model \
    $tgauss $tud $tfdd $weightPower $calcVis2f0 $tld
  else
    echo $fov $fits $convScale $costFunc $regFunc $oradiusStart $stepSize $oradiusNumber $muStart $muFactor $muNumber $npix $startmode $startparam $objname $model $tgauss $tud $tfdd $weightPower $calcVisf0 $tld
    $SCRIPTS/IRBis.display.Mac.nt.ft.csh \
    $fov $fits $convScale $costFunc $regFunc $oradiusStart $stepSize $oradiusNumber $muStart $muFactor $muNumber $npix $startmode $startparam $objname $model $tgauss $tud $tfdd $weightPower $calcVisf0 $tld
  endif
#  echo "weiter mit CR"
#  set ja = $<
cd ..
mv ${results}/RR.konv.iterated.rek1.lin.ps ${results}/E.lin.ps; mv ${results}/RR.konv.iterated.rek1.sqrt.ps ${results}/E.sqrt.ps; mv ${results}/RR.konv.iterated.rek1.log.ps ${results}/E.log.ps
ls -l  ${results}/E.lin.ps ${results}/E.sqrt.ps ${results}/E.log.ps ${results}/liste
# -----------
if($algoMode == 1) then
  set chi2cpc = `awk '{ if($1!="#") {print $7;}; }' ${results}/liste`
  set rrescp  = `awk '{ if($1!="#") {print $8;}; }' ${results}/liste`
  set cpqrec  = `echo $chi2cpc $rrescp | awk '{ q=(($1-1.)+($2-1.))/2.; if($1<1.) {q=(((1./$1)-1.)+($2-1.))/2.;}; print q;}'`
  set phiqrec  = -1.
else
  set chi2phi  = `awk '{ if($1!="#") {print $7;}; }' ${results}/liste`
  set rresphi  = `awk '{ if($1!="#") {print $8;}; }' ${results}/liste`
  set phiqrec  = `echo $chi2phi $rresphi | awk '{ q=(($1-1.)+($2-1.))/2.; if($1<1.) {q=(((1./$1)-1.)+($2-1.))/2.;}; print q;}'`
  set cpqrec   = -1.
endif
if($qrecmode == 1) set qrec = `awk '{ if($1!="#") {print $1;}; }' ${results}/liste`
if(($qrecmode == 2)&&($algoMode == 1)) set qrec = $cpqrec
if(($qrecmode == 2)&&($algoMode != 1)) set qrec = $phiqrec
set weiter = `echo $qrec $qrecvorher | awk '{ weiter=0; if($1<$2) {weiter=1;}; print weiter; }'`
set qrecvorher = $qrec
if( $weiter == 0 ) goto Label222
set muStart1 = `echo $muStart $muFactor | awk '{print $1*$2;}'`
set muStart  = $muStart1
# -----------
echo "Ergebnisse stehen in $results in $resultdir"
cat ${results}/liste
# gv ${results}/RR.konv.iterated.rek1.lin.ps
# ------------ loop over chosen start values of mu ----------------------------------- E ------------
end
Label222:
# ------------ loop over chosen regularization functions ------------------------------- E --------------
end

set endtime = `date`
set host = `hostname`
rm -f runtime.txt; echo "run from $starttime[4] until $endtime[4] on $host" >> runtime.txt

set dir0s = `echo E.*`
foreach f ($dir0s)
   mv $f $resultdir
end
mv runtime.txt $resultdir
cp $0 $resultdir
cd $resultdir
   set listen = `echo E.*/liste`
   rm -f E.liste.0; cat $listen >> E.liste.0
   awk '{ if($1!="#") {print $0;}; }' E.liste.0 > E.liste.00

   rm -f head; awk 'BEGIN{z=1;} { if((z<4)&&($1=="#")) {print $0;}; z=z+1; }' E.liste.0 > head
   if($algoMode == 1) rm -f head00; awk 'BEGIN{z=1;} { if(z==3) {print $0,"| cpqrec";}; z=z+1; }' head > head00
   if($algoMode != 1) rm -f head00; awk 'BEGIN{z=1;} { if(z==3) {print $0,"| phqrec";}; z=z+1; }' head > head00
   rm -f E.liste.00.sorted; sort -k 1 -n E.liste.00 > E.liste.00.sorted
   rm -f E.liste.03; awk '{ chi2cp=$7; rrescp=$8; if(chi2cp>1.) {q=((chi2cp-1.)+(rrescp-1.))/2.;}; if(chi2cp<1.) {q=(((1./chi2cp)-1.)+(rrescp-1.))/2.;}; print $0,q;}' E.liste.00 > E.liste.03
   rm -f E.liste.03.sorted; sort -k 24 -n E.liste.03 > E.liste.03.sorted
   if( $model != "no" ) then
#       qrec built from all measuruments ($qrecmode == 1)
	set distqrecplot = $resultdir.distqrec.1.plot.ps
	rm -f $distqrecplot; $SCRIPTS/gplot -psfl -o $distqrecplot -pscolor -headline "$name" \
                               -xlabel "qrec" -ylabel "distance to theoretical object (khh)" -grid -x 1 -y 9 -t "Distance on qrec: qrec from all measurements" E.liste.00.sorted
#       qrec built from the phase measurements only ($qrecmode == 2)
	set distqrecplot = $resultdir.distqrec.2.plot.ps
	rm -f $distqrecplot; $SCRIPTS/gplot -psfl -o $distqrecplot -pscolor -headline "$name" \
			       -xlabel "qrec" -ylabel "distance to theoretical object (khh)" -grid -x 24 -y 9 -t "Distance on qrec: qrec from phase measurements only" E.liste.03.sorted
   endif
   if($algoMode == 1) then
     rm -f head03; echo "#  " >> head03; echo "# 2) reconstructions sorted with increasing CP-qrec (CP-qrec in the last column):" >> head03
   else
     rm -f head03; echo "#  " >> head03; echo "# 2) reconstructions sorted with increasing PH-qrec (PH-qrec in the last column):" >> head03
   endif
   rm -f head04; echo "#  " >> head04; echo "# 1) reconstructions sorted with increasing qrec:" >> head04
   rm -f head05; echo "#  " >> head05
   rm -f E.liste; cat head head04 E.liste.00.sorted head05 head00 head03 E.liste.03.sorted > E.liste
   set dir0qrec   = `awk 'BEGIN{z=0;} { z=z+1; if(z==1) {print $23;}; }' E.liste.00.sorted`
   set dir0cpqrec = `awk 'BEGIN{z=0;} { z=z+1; if(z==1) {print $23;}; }' E.liste.03.sorted`
#  set fits = `echo rec_*.fits`; ls -l $fits
   cp $dir0qrec/rec_*.fits   bestrec.qrec.fits
   cp $dir0cpqrec/rec_*.fits bestrec.cpqrec.fits
   cp $SCRIPTS/displ.csh .
   if( $qrecmode == 1 ) ./displ.csh E.liste.00.sorted
   if( $qrecmode == 2 ) ./displ.csh E.liste.03.sorted
   rm -f head03 head04 E.liste.00 E.liste.0
cd ..
# echo "- some proposed image reconstruction parameter are listed in data.parameter "
# ls -l $resultdir/data.parameter
echo "=============================================================================================================================================================================="
echo "---> chi^2 values and more of all runs are listed in E.liste "
ls -l $resultdir/E.liste
echo "------------------------------------------------------------------------------------------------------------------------------------------------"
if($qrecmode == 2) echo "- the reconstructions of all runs are displayed sorted with according decreasing quality (using cpqrec)"
if($qrecmode == 1) echo "- the reconstructions of all runs are displayed sorted with according decreasing quality (using qrec)"
echo "   a) with a linear lookuptable in $resultdir.lin.ps "
echo "   b) with a sqrt   lookuptable in $resultdir.sqrt.ps "
echo "   c) with a log    lookuptable in $resultdir.log.ps "
echo "------------------------------------------------------------------------------------------------------------------------------------------------"
echo "---> best reconstruction according to qrec  : bestrec.qrec.fits "
ls -l $resultdir/bestrec.qrec.fits
echo "---> best reconstruction according to cpqrec: bestrec.cpqrec.fits "
ls -l $resultdir/bestrec.cpqrec.fits
echo "------------------------------------------------------------------------------------------------------------------------------------------------"
if($model != "no") echo "---> Distance reconstructed & theoretical object on qrec in $resultdir.distqrec.1.plot.ps and $resultdir.distqrec.2.plot.ps"
ls -l $resultdir/$resultdir.lin.ps $resultdir/$resultdir.sqrt.ps $resultdir/$resultdir.log.ps $resultdir/$resultdir.distqrec.1.plot.ps $resultdir/$resultdir.distqrec.2.plot.ps
echo "=============================================================================================================================================================================="

Label999:
